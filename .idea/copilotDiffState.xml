<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/lib/services/notification_service.dart">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/lib/services/notification_service.dart" />
              <option name="originalContent" value="import 'package:flutter_local_notifications/flutter_local_notifications.dart';&#10;import 'package:timezone/timezone.dart' as tz;&#10;import 'package:timezone/data/latest.dart' as tzData;&#10;&#10;class NotificationService {&#10;  // ✅ Define the plugin instance&#10;  static final FlutterLocalNotificationsPlugin _plugin =&#10;  FlutterLocalNotificationsPlugin();&#10;&#10;  // ✅ Initialization method&#10;  static Future&lt;void&gt; initialize() async {&#10;    tzData.initializeTimeZones();&#10;&#10;    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');&#10;    const iosSettings = DarwinInitializationSettings();&#10;&#10;    const initSettings = InitializationSettings(&#10;      android: androidSettings,&#10;      iOS: iosSettings,&#10;    );&#10;&#10;    await _plugin.initialize(initSettings);&#10;  }&#10;&#10;  // ✅ Request notification permissions&#10;  static Future&lt;void&gt; requestPermissions() async {&#10;    // Android 13+ requires runtime notification permission&#10;    await _plugin.resolvePlatformSpecificImplementation&lt;AndroidFlutterLocalNotificationsPlugin&gt;()?.requestPermission();&#10;    // iOS permissions&#10;    await _plugin.resolvePlatformSpecificImplementation&lt;IOSFlutterLocalNotificationsPlugin&gt;()?.requestPermissions(&#10;      alert: true,&#10;      badge: true,&#10;      sound: true,&#10;    );&#10;  }&#10;&#10;  // ✅ Schedule a notification&#10;  static Future&lt;void&gt; scheduleNotification({&#10;    required int id,&#10;    required String title,&#10;    required String body,&#10;    required DateTime scheduledTime,&#10;  }) async {&#10;    final tz.TZDateTime tzTime = tz.TZDateTime.from(scheduledTime, tz.local);&#10;&#10;    await _plugin.zonedSchedule(&#10;      id,&#10;      title,&#10;      body,&#10;      tzTime,&#10;      const NotificationDetails(&#10;        android: AndroidNotificationDetails(&#10;          'main_channel',&#10;          'Main Channel',&#10;          channelDescription: 'Main channel notifications',&#10;        ),&#10;      ),&#10;      payload: 'default_payload',&#10;      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,&#10;      matchDateTimeComponents: DateTimeComponents.dateAndTime,&#10;    );&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import 'package:flutter_local_notifications/flutter_local_notifications.dart';&#10;import 'package:timezone/timezone.dart' as tz;&#10;import 'package:timezone/data/latest.dart' as tzData;&#10;&#10;class NotificationService {&#10;  // ✅ Define the plugin instance&#10;  static final FlutterLocalNotificationsPlugin _plugin =&#10;  FlutterLocalNotificationsPlugin();&#10;&#10;  // ✅ Initialization method&#10;  static Future&lt;void&gt; initialize() async {&#10;    tzData.initializeTimeZones();&#10;&#10;    const androidSettings = AndroidInitializationSettings('@mipmap/ic_launcher');&#10;    const iosSettings = DarwinInitializationSettings();&#10;&#10;    const initSettings = InitializationSettings(&#10;      android: androidSettings,&#10;      iOS: iosSettings,&#10;    );&#10;&#10;    await _plugin.initialize(initSettings);&#10;  }&#10;&#10;  // ✅ Request notification permissions&#10;  static Future&lt;void&gt; requestPermissions() async {&#10;    // iOS permissions only; Android handled by OS or use permission_handler if needed&#10;    await _plugin.resolvePlatformSpecificImplementation&lt;IOSFlutterLocalNotificationsPlugin&gt;()?.requestPermissions(&#10;      alert: true,&#10;      badge: true,&#10;      sound: true,&#10;    );&#10;  }&#10;&#10;  // ✅ Schedule a notification&#10;  static Future&lt;void&gt; scheduleNotification({&#10;    required int id,&#10;    required String title,&#10;    required String body,&#10;    required DateTime scheduledTime,&#10;  }) async {&#10;    final tz.TZDateTime tzTime = tz.TZDateTime.from(scheduledTime, tz.local);&#10;&#10;    await _plugin.zonedSchedule(&#10;      id,&#10;      title,&#10;      body,&#10;      tzTime,&#10;      const NotificationDetails(&#10;        android: AndroidNotificationDetails(&#10;          'main_channel',&#10;          'Main Channel',&#10;          channelDescription: 'Main channel notifications',&#10;        ),&#10;      ),&#10;      payload: 'default_payload',&#10;      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,&#10;      matchDateTimeComponents: DateTimeComponents.dateAndTime,&#10;    );&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>